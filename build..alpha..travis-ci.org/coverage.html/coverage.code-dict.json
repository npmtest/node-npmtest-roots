{"/home/travis/build/npmtest/node-npmtest-roots/test.js":"/* istanbul instrument in package npmtest_roots */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-roots/lib.npmtest_roots.js":"/* istanbul instrument in package npmtest_roots */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_roots = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_roots = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-roots/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-roots && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_roots */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_roots\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_roots.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_roots.rollup.js'] =\n            local.assetsDict['/assets.npmtest_roots.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_roots.__dirname + '/lib.npmtest_roots.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/index.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Config, EventEmitter, Extensions, Roots, fs, path,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  require('./analytics');\n\n  EventEmitter = require('events').EventEmitter;\n\n  fs = require('fs');\n\n  path = require('path');\n\n  Config = require('./config');\n\n  Extensions = require('./extensions');\n\n\n  /**\n   * @class\n   * @classdesc main roots class, public api for roots\n   */\n\n  Roots = (function(superClass) {\n    extend(Roots, superClass);\n\n\n    /**\n     * Given a path to a project, set up the config and return a roots instance\n     * @param  {[type]} root - path to a folder\n     * @return {Function} - instance of the Roots class\n     */\n\n    function Roots(root, opts1) {\n      this.root = root;\n      this.opts = opts1 != null ? opts1 : {};\n      this.root = path.resolve(this.root);\n      if (!fs.existsSync(this.root)) {\n        throw new Error(\"path does not exist\");\n      }\n      this.extensions = new Extensions(this);\n      this.config = new Config(this, this.opts);\n    }\n\n\n    /**\n     * Alternate constructor, creates a new roots project in a given folder and\n     * returns a roots instance for this project. Takes an object with these keys:\n     *\n     * path: path to the folder you'd like to create and initialize a project in\n     * template: name of the template you'd like to use (default: base)\n     * overrides: data to pass to the template, skips prompts\n     * defaults: sets default values for the template's prompts\n     *\n     * @param  {Object} opts - options object, described above\n     * @return {Promise} Promise for a Roots class instance\n     */\n\n    Roots[\"new\"] = function(opts) {\n      var New;\n      New = require('./api/new');\n      return (new New(this)).exec(opts);\n    };\n\n\n    /**\n     * Exposes an API to manage your roots project templates through sprout.\n     * See api/template for details. The defineGetter hack makes it such that\n     * while you can call roots.template.x like an object, the dependencies\n     * needed for it are lazy-loaded only when you actually make the call.\n     * This boosts the require time of this file by ~400ms.\n     */\n\n    Roots.__defineGetter__('template', function() {\n      return require('./api/template');\n    });\n\n\n    /**\n     * Compiles a roots project. Wow.\n     *\n     * @return {Promise} promise for finished compile\n     */\n\n    Roots.prototype.compile = function(opts) {\n      var Compile;\n      Compile = require('./api/compile');\n      return (new Compile(this)).exec(opts);\n    };\n\n\n    /**\n     * Watches a folder for changes and compiles whenever changes happen.\n     *\n     * @return {Object} [chokidar](https://github.com/paulmillr/chokidar) instance\n     */\n\n    Roots.prototype.watch = function() {\n      var Watch;\n      Watch = require('./api/watch');\n      return (new Watch(this)).exec();\n    };\n\n\n    /**\n     * Removes a project's output folder.\n     * @return {Promise} promise for removed output folder\n     */\n\n    Roots.prototype.clean = function() {\n      var Clean;\n      Clean = require('./api/clean');\n      return (new Clean(this)).exec();\n    };\n\n\n    /**\n     * If an irrecoverable error has occurred, exit the application with\n     * as clear an error as possible and a specific exit code.\n     *\n     * @param {Integer} code - numeric error code\n     * @param {String} details - any additional details to be printed\n     */\n\n    Roots.prototype.bail = require('./api/bail');\n\n    return Roots;\n\n  })(EventEmitter);\n\n  Roots.analytics = function(args) {\n    var analytics;\n    analytics = require('./api/analytics');\n    return analytics(args);\n  };\n\n  module.exports = Roots;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/analytics.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Keen, W, client, global_config, node;\n\n  Keen = require('keen.io');\n\n  global_config = require('./global_config');\n\n  node = require('when/node');\n\n  W = require('when');\n\n  client = Keen.configure({\n    projectId: '5252fe3d36bf5a4f54000008',\n    writeKey: 'd4dff32fa0e23516cf4828d2a71219255efd581f8ab3c1a0cc7081e8b1db6282' + '5f83b0b5f9ec6417fd23fb877d082d1d5ce238ddc46d048b8ba6608557e87904a475f2a930' + 'e4903fc9872323fc120a4859dfb06919d9052e3b676e863a8f6332c21c5cb58be186457398' + '780475dc62a5'\n  });\n\n  global.__track = function(category, e) {\n    var enabled;\n    enabled = global_config().get('analytics');\n    if (enabled) {\n      return node.call(client.addEvent.bind(client), category, e)[\"catch\"](function() {});\n    } else {\n      return W.resolve(false);\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/global_config.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Configstore, os, path, pkg;\n\n  Configstore = require('configstore');\n\n  pkg = require('../package.json');\n\n  os = require('os');\n\n  path = require('path');\n\n\n  /**\n   * Interface for interacting with the roots global config options\n   * Docs here: https://github.com/yeoman/configstore#documentation\n   *\n   * @return {Object} configstore api\n   */\n\n  module.exports = function() {\n    return new Configstore(pkg.name + \"-v\" + (pkg.version.split('.')[0]), {\n      default_template: 'roots-base',\n      analytics: true\n    });\n  };\n\n  module.exports.dir = path.join(os.homedir(), '.config/roots');\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/config.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Config, _, accord, coffee, fs, os, path;\n\n  path = require('path');\n\n  fs = require('fs');\n\n  accord = require('accord');\n\n  coffee = require('coffee-script');\n\n  _ = require('lodash');\n\n  os = require('os');\n\n\n  /**\n   * @class Config\n   * @classdesc Manages configuration info and setup for roots\n   */\n\n  Config = (function() {\n\n    /**\n     * This is an escaped version of the platform specific path seperator to be\n     * used in regular expressions. It is defined as a (derived) constant,\n     * because the path seperator does not change over the course of a run.\n     */\n    var PATH_SEPERATOR_REGEXP_STRING, get_compilers, load_config;\n\n    PATH_SEPERATOR_REGEXP_STRING = path.sep.replace('\\\\', '\\\\\\\\');\n\n\n    /**\n     * Creates a new instance of the roots config. This happens once, as soon as\n     * you initialize the roots class. The constructor sets up a number of default\n     * variables, explained below:\n     *\n     * - output: directory path appended to roots.root that results are written to\n     * - dump_dirs: these directories dump their contents and appear transparent\n     * - env: environment, usually development, staging, or production\n     * - debug: when true, roots is more verbose in its output\n     * - live_reload: when a compile finishes in watch more, reload the browser\n     * - open_browser: when `roots watch` is run, open up the browser\n     *\n     * load_config loads in the app.coffee file, which can overwrite any of these\n     * previous settings\n     *\n     * Then, we set up ignores if not provided by app.coffee, and add a couple\n     * defaults that must always be ignored.\n     *\n     * Finally, we read the package.json file if present and grab all the adapters\n     * needed to compile files in this project. More details on that later.\n     *\n     * @param  {Function} @roots - roots class instance\n     *\n     * @todo uniq filter ignores\n     */\n\n    function Config(roots, opts) {\n      var ref, ref1, ref2;\n      this.roots = roots;\n      this.output = 'public';\n      this.dump_dirs = ['views', 'assets'];\n      this.env = (ref = opts.env) != null ? ref : 'development';\n      this.verbose = (ref1 = opts.verbose) != null ? ref1 : false;\n      this.debug = false;\n      this.live_reload = true;\n      this.open_browser = (ref2 = !opts.no_open) != null ? ref2 : true;\n      load_config.call(this);\n      if (this.ignores == null) {\n        this.ignores = [];\n      }\n      this.ignores = this.ignores.concat(['package.json', 'app*.coffee', this.output + \"/**/*\", '.git*']);\n      if (this.watcher_ignores == null) {\n        this.watcher_ignores = [];\n      }\n      this.watcher_ignores = this.watcher_ignores.concat(['package.json', 'app.coffee', 'node_modules/**/*', this.output + \"/**/*\", '.git*']);\n      this.compilers = get_compilers.call(this);\n    }\n\n\n    /**\n     * This function is responsible for loading the app.coffee file into the\n     * config.\n     *\n     * First, it checks the environment. If it's 'development', the default, roots\n     * loads 'app.coffee', and if there is a custom environment, it tries to load\n     * 'app.ENV_NAME.coffee'. It then makes sure the config file exists. If not,\n     * it just returns, and if there was a custom environment logs out a warning.\n     *\n     * If it does exist, there are two ways app.coffee can be processed. First is\n     * 'simple mode', entered if it doesn't export anything when the file is\n     * required. In this mode, the config file is processed as a coffeescript\n     * object.\n     *\n     * If the file does export anything, this means it's being used as a node\n     * file, so it is required and processed as a node file.\n     *\n     * Each of the values that are exported are attached directly to the config\n     * object, overwriting the defaults if this applies. Finally, extensions are\n     * all registered with roots if they are provided.\n     */\n\n    load_config = function() {\n      var basename, conf, config_exists, config_path, k, v;\n      basename = this.env === 'development' ? \"app\" : \"app.\" + this.env;\n      config_path = path.join(this.roots.root, basename);\n      config_exists = fs.existsSync(config_path + \".coffee\");\n      if (!config_exists) {\n        if (this.env !== 'development') {\n          console.warn((\"\\nEnvironment config file not found. Make sure 'app.\" + this.env + \".coffee' is present at the root of your project.\\n\").yellow);\n        }\n        return;\n      }\n      conf = require(config_path);\n      if (Object.keys(conf).length < 1) {\n        conf = eval(coffee.compile(fs.readFileSync(config_path + \".coffee\", 'utf8'), {\n          bare: true\n        }));\n      }\n      for (k in conf) {\n        v = conf[k];\n        this[k] = v;\n      }\n      if (this.extensions) {\n        return this.roots.extensions.register(this.extensions);\n      }\n    };\n\n\n    /**\n     * Produces the full path to the output folder\n     * @return {String} - path to output folder\n     */\n\n    Config.prototype.output_path = function() {\n      return path.join(this.roots.root, this.output);\n    };\n\n\n    /**\n     * Given a vinyl-wrapped file and optional extension, this function produces\n     * the path to the file's destination. To do so, it goes through these steps:\n     *\n     * - Take the relative path and split it by /\n     * - If it's in a 'dumped' directory, remove that directory\n     * - URI encode any strange characters\n     * - Add the full path to the output folder to the beginning\n     * - Join it back together with /\n     * - If an extension override was provided, replace the extension\n     *\n     * @param  {File} f - vinyl instance\n     * @param  {String} ext - file extension, no dot\n     * @return {String} path to where the file should be written\n     */\n\n    Config.prototype.out = function(f, ext) {\n      var res;\n      res = f.relative.split(path.sep);\n      if (_.includes(this.dump_dirs, res[0])) {\n        res.shift();\n      }\n      res.unshift(this.output_path());\n      res = res.join(path.sep);\n      if (ext) {\n        res = res.replace(RegExp(\"\\\\.[^\" + PATH_SEPERATOR_REGEXP_STRING + \"]*$\"), \".\" + ext);\n      }\n      return res;\n    };\n\n\n    /**\n     * Grabs all adapters necessary to compile files in this project.\n     * Scans the package.json file's dependencies for packages that have\n     * registered accord adapters and loads those. Alerts if dependencies\n     * have not been installed.\n     *\n     * @private\n     *\n     * @return {Array} - array of accord adapters\n     */\n\n    get_compilers = function() {\n      var dep, err, error, i, len, local_compiler, pkg, pkg_json_path, ref, res;\n      res = {};\n      pkg_json_path = path.join(this.roots.root, 'package.json');\n      if (!fs.existsSync(pkg_json_path)) {\n        return res;\n      }\n      pkg = require(pkg_json_path);\n      ref = _.keys(pkg.dependencies).concat(_.keys(pkg.devDependencies));\n      for (i = 0, len = ref.length; i < len; i++) {\n        dep = ref[i];\n        if (accord.supports(dep)) {\n          try {\n            local_compiler = path.join(this.roots.root, 'node_modules', dep);\n          } catch (error) {\n            err = error;\n            throw new Error(\"'\" + dep + \"' not found. install it with 'npm install'\");\n          }\n          res[dep] = accord.load(dep, local_compiler);\n        }\n      }\n      return res;\n    };\n\n    return Config;\n\n  })();\n\n  module.exports = Config;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/extensions.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Extensions, _, compiled_ext, static_ext;\n\n  _ = require('lodash');\n\n  compiled_ext = require('./extensions/compiled');\n\n  static_ext = require('./extensions/static');\n\n\n  /**\n   * @class Extensions\n   * @classdesc Responsible for managing roots extensions\n   * @todo could this be an array with methods on it rather than a class?\n   */\n\n  Extensions = (function() {\n    var check_extension_errors, hooks, not_function;\n\n    function Extensions(roots) {\n      this.roots = roots;\n      this.all = [];\n      this.register([compiled_ext(), static_ext()]);\n    }\n\n\n    /**\n     * Registers roots extension(s) with your project. Tests each extension passed\n     * to ensure it's the right type, then flips the extensions backwards and\n     * pushes each one to the beginning of the array, conserving order, unless\n     * there's a priority given, in which case it's inserted at a certain index.\n     *\n     * @param  {Object} extensions - an extension or array of extensions\n     * @param  {Integer} priority - optional, how early the extensions are run\n     */\n\n    Extensions.prototype.register = function(extensions, priority) {\n      var ext, i, len, ref, results;\n      if (!Array.isArray(extensions)) {\n        extensions = [extensions];\n      }\n      ref = extensions.reverse();\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        ext = ref[i];\n        if (typeof ext !== 'function') {\n          this.roots.bail(125, \"Extension must return a function/class\", ext);\n        }\n        if (priority != null) {\n          results.push(this.all.unshift(ext));\n        } else {\n          results.push(this.all.splice(priority, 0, ext));\n        }\n      }\n      return results;\n    };\n\n\n    /**\n     * Create a new instance of each extension, checking for any sort of errors\n     * in the way the extension was configured.\n     *\n     * @return {Array} - array of instantiated extensions\n     */\n\n    Extensions.prototype.instantiate = function() {\n      var extensions;\n      extensions = this.all.map((function(_this) {\n        return function(Ext) {\n          var err, error, ext;\n          try {\n            ext = new Ext(_this.roots);\n          } catch (error) {\n            err = error;\n            _this.roots.bail(125, err, ext);\n          }\n          check_extension_errors.call(_this, ext);\n          return ext;\n        };\n      })(this));\n      extensions.hooks = hooks.bind(extensions);\n      return extensions;\n    };\n\n\n    /**\n     * Ensures that all existant properties of an extension are functions.\n     *\n     * @param  {Function} ext - instance of an extension\n     */\n\n    check_extension_errors = function(ext) {\n      if (not_function(ext.fs)) {\n        this.roots.bail(125, 'The fs property must be a function', ext);\n      }\n      if (not_function(ext.compile_hooks)) {\n        this.roots.bail(125, 'The compile_hooks property must be a function', ext);\n      }\n      if (not_function(ext.project_hooks)) {\n        this.roots.bail(125, 'The project_hooks property must be a function', ext);\n      }\n      if (not_function(ext.category_hooks)) {\n        return this.roots.bail(125, 'The category_hooks property must be a function', ext);\n      }\n    };\n\n\n    /**\n     * If exists and is not a function. Helper.\n     *\n     * @private\n     *\n     * @param  {???} prop - anything\n     * @return {Boolean} whether it exists and is not a function or not\n     */\n\n    not_function = function(prop) {\n      return prop && typeof prop !== 'function';\n    };\n\n\n    /**\n     * Returns a given extension's hook, if it exists. The nitty gritty:\n     *\n     * - Takes a hook name like 'compile_hooks.before'\n     * - Splits it to a namespace and key at the period\n     * - If an object is not returned, bail. This piece uses a really\n     *   dirty hack to get access to the roots object out of scope.\n     * - For each extension, if that namespace and key both exist\n     *   and the extension is in its category, return the key\n     *\n     * @param  {String} name - hook name, separated with periods\n     * @return {Function}      the hook function if exists, otherwise undefined\n     */\n\n    hooks = function(name, category) {\n      var key, namespc;\n      namespc = name.split('.')[0];\n      key = name.split('.')[1];\n      return _.compact(this.map((function(_this) {\n        return function(ext) {\n          var called_namespace;\n          if (!ext[namespc]) {\n            return;\n          }\n          called_namespace = ext[namespc]();\n          if (typeof called_namespace !== 'object') {\n            _this[_this.length - 2].roots.bail(125, namespc + \" should return an object\", ext);\n          }\n          if (category != null) {\n            if (called_namespace.category) {\n              if (called_namespace.category !== category) {\n                return;\n              }\n            } else {\n              if (ext.category && ext.category !== category) {\n                return;\n              }\n            }\n          }\n          return called_namespace[key];\n        };\n      })(this)));\n    };\n\n    return Extensions;\n\n  })();\n\n  module.exports = Extensions;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/extensions/compiled.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var _, path;\n\n  _ = require('lodash');\n\n  path = require('path');\n\n  module.exports = function() {\n\n    /**\n     * @class\n     * @classdesc This extension puts files into a \"compiled\" category if their\n     * extensions match to an extension that an installed compiler is looking for\n     */\n    var Compiled;\n    return Compiled = (function() {\n      var detect_fn;\n\n      function Compiled(roots) {\n        this.roots = roots;\n        this.category = 'compiled';\n      }\n\n      Compiled.prototype.fs = function() {\n        return {\n          extract: true,\n          ordered: true,\n          detect: detect_fn.bind(this)\n        };\n      };\n\n\n      /**\n       * Detects whether a file should be compiled or not\n       *\n       * @private\n       * @param  {File} f - file object\n       * @return {Boolean} whether the file should be compiled or not\n       */\n\n      detect_fn = function(f) {\n        var exts;\n        exts = _(this.roots.config.compilers).map(function(i) {\n          return i.extensions;\n        }).flatten().value();\n        return _.includes(exts, path.extname(f.relative).slice(1));\n      };\n\n      return Compiled;\n\n    })();\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/extensions/static.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  module.exports = function() {\n\n    /**\n     * @class\n     * @classdesc This extension is run last, scoops all remiaining files into\n     * a \"static\" category to be copied over directly.\n     */\n    var Static;\n    return Static = (function() {\n      function Static() {\n        this.category = 'static';\n      }\n\n      Static.prototype.fs = function() {\n        return {\n          extract: true,\n          detect: (function() {\n            return true;\n          })\n        };\n      };\n\n      return Static;\n\n    })();\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/api/bail.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var RootsError,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  RootsError = (function(superClass) {\n    extend(RootsError, superClass);\n\n    function RootsError(name1, message1, ext1, code1) {\n      this.name = name1;\n      this.message = message1;\n      this.ext = ext1;\n      this.code = code1;\n      Error.call(this);\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    return RootsError;\n\n  })(Error);\n\n  module.exports = function(code, message, ext) {\n    var name;\n    switch (code) {\n      case 125:\n        name = \"Malformed Extension\";\n        break;\n      case 126:\n        name = \"Malformed Write Hook Output\";\n    }\n    throw new RootsError(name, message, ext, code);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/api/template.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Sprout, W, _, fs, global_config, nodefn, remove_roots_config, sprout;\n\n  fs = require('fs');\n\n  _ = require('lodash');\n\n  W = require('when');\n\n  nodefn = require('when/node');\n\n  Sprout = require('../sprout');\n\n  global_config = require('../global_config');\n\n  sprout = Sprout();\n\n\n  /**\n   * Adds a template to sprout. Delegates directly to sprout's API.\n   *\n   * @todo  prepend templates with 'roots-''\n   * @param {Object} args - can contain keys 'name', 'uri'\n   * @return {Promise} a promise for the added template\n   */\n\n  exports.add = function(args) {\n    __track('api', {\n      name: 'template-add',\n      template: args.name\n    });\n    return sprout.add(args.name, args.uri, _.omit(args, 'name', 'uri')).then(function() {\n      return \"template '\" + args.name + \"' added\";\n    });\n  };\n\n\n  /**\n   * Removes a template from sprout. Delegates directly to sprout's API.\n   *\n   * @param {Object} args - must contain key 'name'\n   * @return {Promise} promise for removed template\n   */\n\n  exports.remove = function(args) {\n    if (args == null) {\n      args = {};\n    }\n    __track('api', {\n      name: 'template-remove',\n      template: args.name\n    });\n    if (!args.name) {\n      return W.reject(new Error('please provide a template name to remove'));\n    }\n    return sprout.remove(args.name).then(function() {\n      return \"template '\" + args.name + \"' removed\";\n    })[\"catch\"](function(err) {\n      return W.reject(err);\n    });\n  };\n\n\n  /**\n   * List all templates. Delegates directly to sprout's API.\n   * @param {Object} args - can contain key `pretty`\n   * @return {String} a string colored and formatted for the terminal\n   */\n\n  exports.list = function(args) {\n    var templates;\n    if (args == null) {\n      args = {};\n    }\n    __track('api', {\n      name: 'template-list'\n    });\n    templates = _.keys(sprout.templates);\n    if (args.pretty) {\n      return \"\\n- \" + (templates.join('\\n- ')) + \"\\n\";\n    } else {\n      return templates;\n    }\n  };\n\n\n  /**\n   * Set the default template used with roots new when one isn't supplied.\n   *\n   * @param  {Object} args - must contain key 'name'\n   * @return {Promise} a promise that your template is the default\n   */\n\n  exports[\"default\"] = function(args) {\n    var config;\n    if (args == null) {\n      args = {};\n    }\n    __track('api', {\n      name: 'template-default',\n      template: args.name\n    });\n    if (!args.name) {\n      return W.reject(new Error('please provide a template name'));\n    }\n    if (!_.includes(_.keys(sprout.templates), args.name)) {\n      return W.reject(new Error(\"you do not have this template installed\"));\n    }\n    config = global_config();\n    config.set('default_template', args.name);\n    return W.resolve(\"default template set to '\" + args.name + \"'\");\n  };\n\n\n  /**\n   * Resets the global config file and removes all installed sprout templates.\n   *\n   * @param  {Boolean} override - do not confirm via stdin if true\n   * @return {Promise} a promise for reset templates\n   *\n   * istanbul ignore next\n   */\n\n  exports.reset = function(override) {\n    var deferred;\n    __track('api', {\n      name: 'template-reset'\n    });\n    deferred = W.defer();\n    if (override) {\n      remove_roots_config(deferred);\n    } else {\n      process.stdout.write('are you sure? (y/n) '.yellow);\n      process.stdin.resume();\n      process.stdin.setEncoding('utf8');\n      process.stdin.on('data', function(txt) {\n        process.stdin.pause();\n        txt = txt.trim();\n        if (txt === 'y' || txt === 'Y') {\n          return remove_roots_config(deferred);\n        }\n        return deferred.reject('reset cancelled');\n      });\n    }\n    return deferred.promise;\n  };\n\n\n  /**\n   * Removes all other templates and global config.\n   *\n   * @private\n   * @param  {Object} deferred - deferred object\n   * @return {Promise} promise for finished task\n   *\n   * istanbul ignore next\n   */\n\n  remove_roots_config = function(deferred) {\n    return nodefn.call(fs.unlink, global_config().path);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/lib/sprout.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var Sprout, fs, global_config, mkdirp, osenv, path;\n\n  Sprout = require('sprout');\n\n  path = require('path');\n\n  osenv = require('osenv');\n\n  mkdirp = require('mkdirp');\n\n  fs = require('fs');\n\n  global_config = require('./global_config');\n\n  module.exports = function() {\n    var tpl_path;\n    tpl_path = path.join(global_config.dir, 'templates');\n    if (!fs.existsSync(tpl_path)) {\n      mkdirp.sync(tpl_path);\n    }\n    return new Sprout(tpl_path);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/post_install.js":"require('coffee-script/register')\nrequire('colors')\nvar mkdirp = require('mkdirp')\nvar global_config = require('./lib/global_config')\n\nconsole.log('---------------------------------------------------------'.grey)\nconsole.log('Roots uses analytics to help the core team to get a')\nconsole.log('better view of how developers use roots. All analytics')\nconsole.log('are collected anonymously, and analytics data is used')\nconsole.log('only to make roots better for everyone. However, if you')\nconsole.log('would like to disable analytics, you are welcome to do')\nconsole.log('so by running the command ' + '`roots analytics --disable`'.bold)\nconsole.log('')\nconsole.log('Much like roots itself, roots\\' analytics are open source.')\nconsole.log('Check out ' + 'http://roots.cx/analytics'.bold + ' for more information.')\nconsole.log('---------------------------------------------------------'.grey)\n\n// create roots' global config directory\nmkdirp.sync(global_config.dir)\n","/home/travis/build/npmtest/node-npmtest-roots/node_modules/roots/src/browser/main.js":"!(function(){\n  var loc = window.location;\n  var protocol = loc.protocol === 'http:' ? 'ws://' : 'wss://';\n  var address = protocol + loc.host + loc.pathname + '/ws';\n  (new WebSocket(address)).onmessage = handle_msg;\n\n  var handlers = {\n    error: show_error,\n    compiling: show_compiling,\n    reload: function(){ loc.reload() }\n  }\n\n  insert_css();\n  load_config();\n\n  function handle_msg(msg){\n    var msg = JSON.parse(msg.data);\n    handlers[msg.type](msg.data);\n  }\n\n  function insert_css(){\n    var style = document.createElement(\"link\");\n    style.setAttribute(\"rel\", \"stylesheet\");\n    style.setAttribute(\"type\", \"text/css\");\n    style.setAttribute(\"href\", \"/__roots__/main.css\");\n    document.head.appendChild(style);\n  }\n\n  function load_config(){\n    if (!__livereload) handlers.reload = function(){};\n  }\n\n  function show_error(error){\n    remove_compiling();\n    if (document.getElementById('roots-error')) return\n\n    var el = document.createElement(\"div\")\n    var cleanError = error.replace ? error.replace(/(\\r\\n|\\n|\\r)/gm, '<br>') : \"\";\n    el.innerHTML = \"<div id='roots-error'><pre><span>compile error</span>\" + cleanError + \"</pre></div>\";\n    document.body.appendChild(el);\n  }\n\n  function show_compiling(){\n    console.log('compiling')\n    if (document.getElementById('roots-load-container')) return\n\n    var el = document.createElement(\"div\");\n    el.innerHTML = '<div id=\"roots-load-container\"><div id=\"roots-compile-loader\"><div id=\"l1\"></div><div id=\"l2\"></div><div id=\"l3\"></div><div id=\"l4\"></div><div id=\"l5\"></div><div id=\"l6\"></div><div id=\"l7\"></div><div id=\"l8\"></div></div></div>';\n    document.body.appendChild(el);\n  }\n\n  function remove_compiling(){\n    var el = document.getElementById('roots-load-container');\n    el.parentNode.removeChild(el);\n  }\n\n}());\n"}